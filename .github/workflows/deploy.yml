name: CI/CD ‚Äì PEENYTOOLS

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/peeny-backend:latest

      - name: Build & push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/peeny-frontend:latest

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Prepare SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create docker-compose.yml
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          echo "version: \"3.8\"" > docker-compose.yml
          echo "" >> docker-compose.yml
          echo "services:" >> docker-compose.yml
          echo "  backend:" >> docker-compose.yml
          echo "    image: ${DOCKER_HUB_USERNAME}/peeny-backend:latest" >> docker-compose.yml
          echo "    restart: unless-stopped" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      DB_HOST: 93.127.206.203" >> docker-compose.yml
          echo "      DB_USER: ptadmin" >> docker-compose.yml
          echo "      DB_PASSWORD: iE6IApsCDfNsVAdurDdK" >> docker-compose.yml
          echo "      DB_NAME: peenytoolsdb" >> docker-compose.yml
          echo "      DB_PORT: 3306" >> docker-compose.yml
          echo "      JWT_SECRET: pennytools-ai-shopfront-secure-jwt-secret-key-2024" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - \"3000:3000\"" >> docker-compose.yml
          echo "    networks:" >> docker-compose.yml
          echo "      - app-network" >> docker-compose.yml
          echo "" >> docker-compose.yml
          echo "  frontend:" >> docker-compose.yml
          echo "    image: ${DOCKER_HUB_USERNAME}/peeny-frontend:latest" >> docker-compose.yml
          echo "    restart: unless-stopped" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      VITE_API_BASE_URL: http://backend:3000" >> docker-compose.yml
          echo "    depends_on:" >> docker-compose.yml
          echo "      - backend" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - \"80:80\"" >> docker-compose.yml
          echo "    networks:" >> docker-compose.yml
          echo "      - app-network" >> docker-compose.yml
          echo "" >> docker-compose.yml
          echo "networks:" >> docker-compose.yml
          echo "  app-network:" >> docker-compose.yml
          echo "    driver: bridge" >> docker-compose.yml

      - name: Transfer docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.VPS_USER }}/peenytools"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "üöÄ Deploying PeenyTools..."
            mkdir -p /home/${{ secrets.VPS_USER }}/peenytools || { echo "Failed to create deployment directory"; exit 1; }
            cd /home/${{ secrets.VPS_USER }}/peenytools || { echo "Failed to navigate to deployment directory"; exit 1; }
            docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}" || { echo "Docker login failed"; exit 1; }
            echo "üîÑ Pulling latest Docker images..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/peeny-backend:latest || { echo "Failed to pull backend image"; exit 1; }
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/peeny-frontend:latest || { echo "Failed to pull frontend image"; exit 1; }
            echo "üõë Stopping existing containers..."
            docker compose down || { echo "Failed to stop containers"; exit 1; }
            echo "üîç Checking for port 3000 conflicts..."
            if lsof -i :3000; then
              echo "‚ö†Ô∏è Port 3000 is in use, attempting to free it..."
              docker ps -q --filter "publish=3000" | xargs -r docker stop || { echo "Failed to stop containers using port 3000"; exit 1; }
              docker ps -a -q --filter "publish=3000" | xargs -r docker rm || { echo "Failed to remove containers using port 3000"; exit 1; }
              if lsof -i :3000; then
                echo "‚ùå Port 3000 still in use by non-Docker process, please free it manually"
                exit 1
              fi
            fi
            echo "üöÄ Starting containers..."
            docker compose up -d || { echo "Failed to start containers"; exit 1; }
            echo "‚úÖ Deployment completed successfully!"